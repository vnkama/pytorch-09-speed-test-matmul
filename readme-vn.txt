========================
algorithm_tests
    algorithm
    тесты алгоритма, по сути все тесты за один запуск программы, тк разыне алгоритмы в раз не тестируется
    в тесты алгоритма входят тесты разных библиотек

shape
    шейпом называю тест определенного размера, например 100 агентов движутся на 100 шагов
    тест шейпа состоит из нескрольких субтестов разных баблдиотек и методов.
    все субтесты в рамках одного shaper должны иметь одинаковый результат в расчетах.
    например если 100 солдатов прошли каждый своим маршрутом то итоговые точки должны быть одинаковы независимо от того
    считали мы numpy или pytorch
    поэтому верификация привязана к shape

    про время выполнения
    все суб тесты считают одну и туже зхадачу но покажут разное время.
    именно в рамках одного шейпа можно сравнивать скорость выполнения


data_gene_mode
const       все входные данные заданы константами
            все перемещения заданы константами
            все результаты для верификации заданы константами
            все промежуточные данные сохраняются


random_full все перемещения movements - посчитаны заранее
            все перемещения агентов пишем в routes_figures
            все промежуточные данные сохраняются
            результат ыпроверяются по первому методу


random_1000 генерируется 1миллион случайнх чисел. и на их основе формируем свйо генератор случайных числе



verify

если точек в фигуре меньше максимума то в результате (routes_len) недостающие точки заполняются 0, 0

========================

engine2d.torch

CPU в 6 раз меделннее чем engine2d.numpy
GPU в 6 раз меделннее чем CPU

найдена операция копирования тензор - тензор (3-4 элемента, точки для одного агента)   выполняющаяся около 120 мкс(!), что бескончно долго.
для CPU 20мс
для GPU 120мс

========================
20-09-2021

Функция np_f4
Переписал numpy уменьшив число вложенных циклов. Раньше был цикл movement_i а в нем agent_i
Использовав 4х мерный массив для точек.
Можно сформулировать так: 2х мерный массив (agent_i x points) матриц 3x1. Технически он является массивом N,N,3,1.

Переписал torch


Результаты тестов                               numpy_f4        torch_cpu       torch_gpu
'agents_count': 100, 'routes_len': 100          5000 (!)        14000           25000

'agents_count': 1000, 'routes_len': 100         35000 (!)       45000           63000
'agents_count': 1000, 'routes_len': 1000       344K             301K (!)        462K
'agents_count': 1000, 'routes_len': 10000      3.3             3.2 (!)          4.1
'agents_count': 1000, 'routes_len': 100000      33.7           31.4             out of memory


'agents_count': 10000, 'routes_len': 100        347000          276000 (!)      489000
'agents_count': 10000, 'routes_len': 1000      3.2              1.2 (!)         2.8
'agents_count': 10000, 'routes_len': 10000     31              12 (!)           out of memory


'agents_count': 100000, 'routes_len': 100       3.5             2.4 (!)         4.1
'agents_count': 100000, 'routes_len': 1000     33               8 (!)           out of memory
'agents_count': 100000, 'routes_len': 10000    out of memory

'agents_count': 1000000, 'routes_len': 1000    out of memory




1)Отмечу что алгоритм требует слишком много памяти, потому что храним все промежуточные значения для каждого агента
для каждого movements_i. Что приводит к переполнению.

2) ни разу не победил алгоритм torch.gpu. Он проигрывает torch.cpu в 1,5 .. 2 раза. Надо менять алгоритм увеличивать продолжительность теста
Может с ромтом объема теста резульаты GPU улучшаться.

3) на малых объемах побеждает numpy на больших torch.cpu

4) на домашнем компе, (более мощная видеокарта) numpy, pytorch.cpu, pytorch gpu имеют примренол одинакоывае параметры
на знаячении:
'agents_count': 100000, 'routes_len': 100
################################################################################

engine2d
numba

варианты
f1  1 thread = 1 agent
f2  1 thread = 1 point
f3  9 thread = 1 point
